// Code generated by kratos tool genbts. DO NOT EDIT.

/*
  Package dao is a generated cache proxy package.
  It is generated from:
  type Dao interface {
		Close()
		Ping(ctx context.Context) (err error)
		// bts: -nullcache=&model.Subject{ID:-1} -check_null_code=$!=nil&&$.ID==-1
		Subject(c context.Context, oid int64, tp int8) (*model.Subject, error)
	}
*/

package dao

import (
	"context"

	"github.com/go-kratos/kratos/pkg/cache"
	"kratos-reply/internal/model"
)

// Subject get data from cache if miss will call source method, then add to cache.
func (d *dao) Subject(c context.Context, oid int64, tp int8) (res *model.Subject, err error) {
	addCache := true
	res, err = d.CacheSubject(c, oid, tp)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res != nil && res.ID == -1 {
			res = nil
		}
	}()
	if res == nil {
		cache.MetricHits.Inc("bts:Subject")
		return
	}
	cache.MetricMisses.Inc("bts:Subject")
	res, err = d.RawSubject(c, oid, tp)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.Subject{ID: -1}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheSubject(c, oid, miss, tp)
	})
	return
}
