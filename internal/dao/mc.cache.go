// Code generated by kratos tool genmc. DO NOT EDIT.

/*
  Package dao is a generated mc cache package.
  It is generated from:
  type _mc interface {
		// mc: -key=keySub -type=get
		CacheSubject(c context.Context, oid int64, tp int8) (*model.Subject, error)
		// mc: -key=keySub -expire=d.demoExpire
		AddCacheSubject(c context.Context, oid int64, sub *model.Subject, tp int8) (err error)
		// mc: -key=keySub
		DeleteSubjectCache(c context.Context, oid int64, tp int8) (err error)
		// mc: -key=keyRp -type=get
		CacheReply(c context.Context, rpID int64) (*model.Reply, error)
	}
*/

package dao

import (
	"context"
	"fmt"

	"github.com/go-kratos/kratos/pkg/cache/memcache"
	"github.com/go-kratos/kratos/pkg/log"
	"kratos-reply/internal/model"
)

var _ _mc

// CacheSubject get data from mc
func (d *dao) CacheSubject(c context.Context, id int64, tp int8) (res *model.Subject, err error) {
	key := keySub(id, tp)
	res = &model.Subject{}
	if err = d.mc.Get(c, key).Scan(res); err != nil {
		res = nil
		if err == memcache.ErrNotFound {
			err = nil
		}
	}
	if err != nil {
		log.Errorv(c, log.KV("CacheSubject", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// AddCacheSubject Set data to mc
func (d *dao) AddCacheSubject(c context.Context, id int64, val *model.Subject, tp int8) (err error) {
	if val == nil {
		return
	}
	key := keySub(id, tp)
	item := &memcache.Item{Key: key, Object: val, Expiration: d.demoExpire, Flags: memcache.FlagJSON}
	if err = d.mc.Set(c, item); err != nil {
		log.Errorv(c, log.KV("AddCacheSubject", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// DeleteSubjectCache delete data from mc
func (d *dao) DeleteSubjectCache(c context.Context, id int64, tp int8) (err error) {
	key := keySub(id, tp)
	if err = d.mc.Delete(c, key); err != nil {
		if err == memcache.ErrNotFound {
			err = nil
			return
		}
		log.Errorv(c, log.KV("DeleteSubjectCache", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// CacheReply get data from mc
func (d *dao) CacheReply(c context.Context, id int64) (res *model.Reply, err error) {
	key := keyRp(id)
	res = &model.Reply{}
	if err = d.mc.Get(c, key).Scan(res); err != nil {
		res = nil
		if err == memcache.ErrNotFound {
			err = nil
		}
	}
	if err != nil {
		log.Errorv(c, log.KV("CacheReply", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}
